{
	"info": {
		"_postman_id": "f8a47195-b825-45ad-bd71-265222c75902",
		"name": "SimpleBookAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28775501"
	},
	"item": [
		{
			"name": "fetchingbookdata",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}"
			},
			"response": []
		},
		{
			"name": "fetchingSingleBookDetails",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books/:bookid?bookid=3",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books",
						":bookid"
					],
					"query": [
						{
							"key": "bookid",
							"value": "3"
						}
					],
					"variable": [
						{
							"key": "bookid",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "api-status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"     pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'status'\", function () {",
							"     const responseData = pm.response.json();",
							"",
							"     pm.expect(responseData).to.have.property('status');",
							"});",
							"",
							"",
							"pm.test(\"Status field is a non-empty string\", function () {",
							"     const responseData = pm.response.json();",
							"",
							"     pm.expect(responseData).to.be.an('object');",
							"     pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status field should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"     pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"console.log(responseData);",
							"console.log(responseData.status);",
							"console.log(responseData['status']);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base-url}}/status",
				"description": "\nThis endpoint makes an HTTP GET request to retrieve the status. The response will have a status code of 200 and a content type of application/json. The response body will include a \"status\" field, which may contain specific details about the status.\n"
			},
			"response": []
		},
		{
			"name": "List of books",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base-url}}/books?limit=2",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction",
							"disabled": true
						},
						{
							"key": "name",
							"value": "The Midnight Library",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "hello-world-api",
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://simple-books-api.glitch.me"
			},
			"response": []
		},
		{
			"name": "Order Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - created and orderId\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.created).to.exist;",
							"    pm.expect(responseData.orderId).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"OrderId is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.orderId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"OrderId should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"var template = `",
							"<style type=\"text/css\">",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"</style>",
							"",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>Order Created</th>",
							"        <th>Order ID</th>",
							"    </tr>",
							"    <tr>",
							"        <td>{{response.created}}</td>",
							"        <td>{{response.orderId}}</td>",
							"    </tr>",
							"</table>",
							"`;",
							"",
							"function constructVisualizerPayload() {",
							"    return {response: pm.response.json()}",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - created and orderId\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.created).to.exist;",
							"    pm.expect(responseData.orderId).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"OrderId is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.orderId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"OrderId should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Created field is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.created).to.be.a('boolean');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n//   \"customerName\": \"John Massawe\"\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base-url}}//orders",
				"description": "The endpoint allows the creation of a new order via an HTTP POST request to {{base-url}}//orders.\n\n### Request Body\n\n- **bookId** (number) - The ID of the book for the order.\n- **customerName** (string) - The name of the customer placing the order.\n    \n\n### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"created\": {\n      \"type\": \"boolean\"\n    },\n    \"orderId\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```\n\nThe response indicates the success of the order creation with a boolean flag \"created\" and an optional orderId.\n\nStatus Code: 201  \nContent-Type: application/json"
			},
			"response": []
		},
		{
			"name": "Get an Order",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"John Massawe\"\r\n//   \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/orders/:orderId",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "3dSoL1F8GdWDCOgZ36VMx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"Angel Schiller {{$randomLastName}}\"\r\n}\r\n\r\n// at first you will get a 204 PATCH req\r\n// now send a GET req a see the response will have changed",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/orders/:orderId",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "3dSoL1F8GdWDCOgZ36VMx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"Angel Schiller {{$randomLastName}}\"\r\n}\r\n\r\n// at first you will get a 204 DELETE req\r\n// now send a GET req in [GET an order api] a see the response will have a deleted order",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/orders/:orderId",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "3dSoL1F8GdWDCOgZ36VMx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "reg-api-client",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Postman\",\r\n   \"clientEmail\": \"valenein@onlyinzanzibar.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base-url}}/api-clients"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base-url",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		}
	]
}